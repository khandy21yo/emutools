epl2pdf

DESCRIPTION

This program converts an EPL2 file info a pdf file.

EPL2 is a printer command language used by Eltron/Zebra bar code
printers. It does not implement any ZPL commands.
It is, as yet, incomplete. It is still in development.
But it is capable of handling some simple spl2 command files.

Expect bugs, missing commands, etc. It should be sufficient to
display a image to a user, but expect problems generating actual
bar-code labels. Test first.


USAGE

Usage: epl2pdf [OPTIONS]* <file.epl>
  -p, --dpi=BPS                       dots per inch
  -o, --output=filename               output file name
  -w, --width=points (1/72 inch)      Width of form
  -l, --length=points (1/72 inch)     Length of form
  -f, --output=font name              font to use
  -a, --fadjust=% adjustment          Adjustment for font width
  -d, --debug                         debugging messages

-p defines the EPL2 points per inch. Default value is 203. Some printers
use 300. Other values are allowed, but do not match any existing printers.

-o specified the output file. Default is '/tmp/epl2pdf.pdf'.

-w specified the width of the label to use, in points. There are 72 points
to the inch. Default is Letter size paper (8.5 inches).

-l specifies the length of the label, in points. There are 72 points to the
inch. Default is Letter size paper (11 inches, 792 points).

-f allows specifying another font to use instead of "courier prime".
Some fonts that you may prefer include "IBM Plex Mono SemiBold",
"Aerial Mono". A mono-spaced font usually works better at matching
actual labels than a non-mono font.

-a is used to adjust the width of the characters, in order to make them
more closely match the EPL2's hight/width. This is a multiplier, so a
enter of 0.75 would make the font 1/4 smaller, and 1.5 would make it
50% larger.


The program is command line driven. It is incomplete yet, as it is missing
several features that will be necessary for actual use.

	./epl2pdf test_a.epl2

This reads in the file 'source.epl2' and, by default, creates
'/tmp/epl2pdf.pdf'. You can change this with the '-o' option.

to run all of the test cases in the sources at once, you can use

	./epl2pdf test*.epl2 -o test.pdf


BUILDING

This uses the "cmake" package to build.
I am using it because it does not seem to break as often as
autoconf/automake does.

It is currently only been tested on Debian/test Linux.
Please let me know if other systems have problems building.

To Build, cd to the source directory and type

	cmake .
	make


COMMANDS IMPLEMENTED

These commands have been implemented, at least partially.

	A, B, b, FE, FI, FK, FR, FS, LE, LO, LS, LW, N,
	P, q, Q, R, X, ;

Others may exist, depending on the completeness of this document.


KNOWN BUGS/NOTES

It uses the podofo library to handle the PDF output. This is a poorly
documented package, but it seems to have the necessary features to
implement the needed features.

It uses the zint library to generate the bar-codes.
This library contains most, if not all, of the needed bar-code
formats necessary to implement the EPL2 requirements.
Gnu-barcode has dropped its library access, and does not
implement many of the barcodes needed.

It uses popt to handle parsing the command line.
My versions of getopt were just broken when I started this long ago.

All of the test file (test-*.epl2) in the distribution are those used to
test/debug the program. They are not meant to be useful in any other way,
but should give a sample of what works.

Minimal implementation of many commands. Not all of the EPL2 commands are
implemented, and many features of the implemented commands are missing.

Do not expect an exact match between the EPL2 output and the PDF
output. There are many fundamental differences in the way EPL2 sees
the world, and the way PDF sees it.

EPL2 assumes that things are being created on a black/white bitmap,
PDFs assume colored vectors. Some commands, like XORing the objects with
the background, is not implemented.

This program uses a specific font (Courier-Prime) for PDF, and not the
actual EPL2 fonts. I have not yet found a font that matches the
EPL2 fonts better than this one, which is not that close.
Character shapes and sizes are different.
'Courier-Prime' just happens to be the bold courier font available on my
development machines (Debian/test).

It does not handle download fonts.

It does not handle variables (time, counters, variables).

It does not handle graphics.

It does not handle large blobs of binary data.

Converting from the EPL2 pixel dimensions to the PDF points can end up
causing position and size issues. Objects can vary size and
position in the conversion.

EPL2 uses the top left of a glyph to position it, and PDF uses the baseline
left.

If you get the error
	terminate called after throwing an instance of 'PoDoFo::PdfError'
then you probably already have a /tmp/epl2pdf.pdf file under another user.
Remove it and try again.

Bar codes are not fully implemented or tested. Much has been done, but Zint
has may special "features" in many bar code symbologies. The barcodes
currently have a minimal setup.

Bar-code human readable text is not in the proper place. Zint is doing odd
things.

The message
	Syntax Warning: Mismatch between font type and embedded font file
has something to do with the way fonts are stored in the PDF file.
It seems to be something about a type1 or a truetype flag in the PDF file.

These bar-codes  haven't been validated (scanned) to make sure they are
actually correct or readable. They look right, but some of them, like
maxicode, have a lot of weirdness in the zint library to process them.

Adjustments set for the width of the bars in a bar-code are ignored.
Zint doesn't have the concept built in. Scaling the width might work as
an approximation, but the amount to scale is complex due to the unknown
size the bars are generated as currently.

Does not handle "Code Pages".

depending on which version of zint, the circles in maxicode may come
out as one black circle instead of a set of rings

"N" command only works at beginning of page.

ZB, ZT not implemented yet. Will only work at start of page.
	Is it worth implementing? Mutch mucking around with the 
	transformation matrix code would be necessary.

There are cases where an EPL2 printer will generate bad barcodes, such as
a Code128 without any data, or a Codabar with the wrong number of characters, 
but Zint just reports an error an refuses to generate bad barcodes.
