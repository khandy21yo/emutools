epl2pdf

DESCRIPTION

This program convertss an EPL2 file info a pdf file.
EPL2 is a printer command language used by Eltron/Zebra bar code
printers. It does not implemsent any ZPL commands.
It is, as yet, incomplete. It is still in development.
But it is capable of handling some simple spl2 command files.

It uses popt to handle parsing the command line.
My versions of getopt were just broken when I started this long ago.

It uses the podofo library to handle the PDF utput. This is a poorly
documented package, but it seems to have several necessary
features missing from other libraries.

It uses the zint library to generate the barcodes.
This library containg most, if not all, of the needed barcode
formats necessary to implement the EPL2 requirements.

What commands are implemented re only partial at the moment,
missing features as rotation and reverse-image.

Expect bugs, missing sommands, etc.
It is only partiall at the moment.


USAGE

Usage: epl2pdf [OPTIONS]* <file.epl>
  -p, --dpi=BPS                       dots per inch
  -o, --output=filename               utput file name
  -w, --width=points (1/72 inch)      Width of form
  -l, --length=points (1/72 inch)     Length of form
  -d, --debug                         debugging messages

-p defines the EPL2 points per inch. Default value is 203. Some printers
use 300. Other values are allowed, but do not match any existing printers.

-o specified the output file. Default is '/tmp/epl2pdf.pdf'.

-w specified the width of the label to use, in points. There are 72 points
to the inch. Default is Letter size paper (8.5 inches).

-l specifies the length of the label, in points. There are 72 points to the
inch. Default is Letter size paper (11 inches, 792 points).


The program is command line driven. It isn't complete yet, so is missing
several features that will be necessary for actual use.

	./epl2pdf test_a.epl2

This reads in the file 'source.epl2' and, by default, creates
'/tmp/epl2pdf.pdf'. You can change this with the '-o' option.

to run all of the test cases in the sources at once, you can use

	./epl2pdf test*.epl2 -o test.pdf


BUILDING

This uses the "cmake" package to build.
I am using it because it does not seem to break as often as
autoconf/automake does.

It is currently only been tested on Debian/test Linux.
Please let me know if other systems have problems building.

To Build, cd to the source directory and type

	cmake .
	make


KNOWN BUGS/NOTES

All of the test file (test-*.epl2) in the distribution are those used to
test/debug the programs commands. They are not meant to be useful in any
way
Minimal implmentation of commands. Only some EPL2 commands are handled.

Incomplete implementations. Many features of the implemented operations are not
handled yet., but they give some idea as to which features have been implemented.

Do not expect an exact match between the EPL2 output and the PDF
output. There are many differences between them.

EPL2 assumes that things are being created on a black/white bitmap,
which is different than PDFs color vector format. Some things,
like XORing the objects with the background, is not possible.

This program uses a specific font (Courier-Prime) for PDF, and not the
actual EPL2 iembeded fonts. I have not yet found a font that matches the
EPL2 fonts better than this one, which is not that close.
Character shapes and sizes are somewhat different.
'Courier-Prime' just happens to be the bold courier font on my development
machine (Debian/test).

It does not handle download fonts yet.

It does not handle variables (time, counters, variables) yet.

It does not yet handle graphics yet.

It does not handle latge blobs of binary data yet.

Converting from the EPL2 point dimensions to the PDF points can end up
causing slight position and size issues. Objects can vary size and
position by a pixel or two in the conversion.

EPL2 uses the top left of a character for its position, and PDF uses the
bottom left as its position. Currently not handling ascender/descender height.

If you get the error
	terminate called after throwing an instance of 'PoDoFo::PdfError'
then you probably already have a /tmp/epl2pdf.pdf file under another user.
Remove it and try again.

Barcodes not fully implemented.

Barcode human readable text is not in a good place. Don't know why.

The message
	Syntax Warning: Mismatch between font type and embedded font file
has something to do with the way fonts are stored in the PDF file.
It seems to be something about a type1 or a truetype flag in the PDF file.

